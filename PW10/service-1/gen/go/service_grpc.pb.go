// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: service1.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookMicroserviceClient is the client API for BookMicroservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookMicroserviceClient interface {
	CreateBook(ctx context.Context, in *BookForm, opts ...grpc.CallOption) (*Response, error)
	UpdateBook(ctx context.Context, in *BookInDb, opts ...grpc.CallOption) (*Response, error)
	DeleteBook(ctx context.Context, in *BookID, opts ...grpc.CallOption) (*Response, error)
	GetAllBooks(ctx context.Context, in *EmptyForm, opts ...grpc.CallOption) (*ResponseArray, error)
	GetOneBook(ctx context.Context, in *BookID, opts ...grpc.CallOption) (*Response, error)
}

type bookMicroserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookMicroserviceClient(cc grpc.ClientConnInterface) BookMicroserviceClient {
	return &bookMicroserviceClient{cc}
}

func (c *bookMicroserviceClient) CreateBook(ctx context.Context, in *BookForm, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/service1.BookMicroservice/CreateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookMicroserviceClient) UpdateBook(ctx context.Context, in *BookInDb, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/service1.BookMicroservice/UpdateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookMicroserviceClient) DeleteBook(ctx context.Context, in *BookID, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/service1.BookMicroservice/DeleteBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookMicroserviceClient) GetAllBooks(ctx context.Context, in *EmptyForm, opts ...grpc.CallOption) (*ResponseArray, error) {
	out := new(ResponseArray)
	err := c.cc.Invoke(ctx, "/service1.BookMicroservice/GetAllBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookMicroserviceClient) GetOneBook(ctx context.Context, in *BookID, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/service1.BookMicroservice/GetOneBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookMicroserviceServer is the server API for BookMicroservice service.
// All implementations must embed UnimplementedBookMicroserviceServer
// for forward compatibility
type BookMicroserviceServer interface {
	CreateBook(context.Context, *BookForm) (*Response, error)
	UpdateBook(context.Context, *BookInDb) (*Response, error)
	DeleteBook(context.Context, *BookID) (*Response, error)
	GetAllBooks(context.Context, *EmptyForm) (*ResponseArray, error)
	GetOneBook(context.Context, *BookID) (*Response, error)
	mustEmbedUnimplementedBookMicroserviceServer()
}

// UnimplementedBookMicroserviceServer must be embedded to have forward compatible implementations.
type UnimplementedBookMicroserviceServer struct {
}

func (UnimplementedBookMicroserviceServer) CreateBook(context.Context, *BookForm) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedBookMicroserviceServer) UpdateBook(context.Context, *BookInDb) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBook not implemented")
}
func (UnimplementedBookMicroserviceServer) DeleteBook(context.Context, *BookID) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBook not implemented")
}
func (UnimplementedBookMicroserviceServer) GetAllBooks(context.Context, *EmptyForm) (*ResponseArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBooks not implemented")
}
func (UnimplementedBookMicroserviceServer) GetOneBook(context.Context, *BookID) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneBook not implemented")
}
func (UnimplementedBookMicroserviceServer) mustEmbedUnimplementedBookMicroserviceServer() {}

// UnsafeBookMicroserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookMicroserviceServer will
// result in compilation errors.
type UnsafeBookMicroserviceServer interface {
	mustEmbedUnimplementedBookMicroserviceServer()
}

func RegisterBookMicroserviceServer(s grpc.ServiceRegistrar, srv BookMicroserviceServer) {
	s.RegisterService(&BookMicroservice_ServiceDesc, srv)
}

func _BookMicroservice_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookMicroserviceServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service1.BookMicroservice/CreateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookMicroserviceServer).CreateBook(ctx, req.(*BookForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookMicroservice_UpdateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookInDb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookMicroserviceServer).UpdateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service1.BookMicroservice/UpdateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookMicroserviceServer).UpdateBook(ctx, req.(*BookInDb))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookMicroservice_DeleteBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookMicroserviceServer).DeleteBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service1.BookMicroservice/DeleteBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookMicroserviceServer).DeleteBook(ctx, req.(*BookID))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookMicroservice_GetAllBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookMicroserviceServer).GetAllBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service1.BookMicroservice/GetAllBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookMicroserviceServer).GetAllBooks(ctx, req.(*EmptyForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookMicroservice_GetOneBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookMicroserviceServer).GetOneBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service1.BookMicroservice/GetOneBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookMicroserviceServer).GetOneBook(ctx, req.(*BookID))
	}
	return interceptor(ctx, in, info, handler)
}

// BookMicroservice_ServiceDesc is the grpc.ServiceDesc for BookMicroservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookMicroservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service1.BookMicroservice",
	HandlerType: (*BookMicroserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBook",
			Handler:    _BookMicroservice_CreateBook_Handler,
		},
		{
			MethodName: "UpdateBook",
			Handler:    _BookMicroservice_UpdateBook_Handler,
		},
		{
			MethodName: "DeleteBook",
			Handler:    _BookMicroservice_DeleteBook_Handler,
		},
		{
			MethodName: "GetAllBooks",
			Handler:    _BookMicroservice_GetAllBooks_Handler,
		},
		{
			MethodName: "GetOneBook",
			Handler:    _BookMicroservice_GetOneBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service1.proto",
}
